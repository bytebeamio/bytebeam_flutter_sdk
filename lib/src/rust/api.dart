// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'api.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `create_agent`, `parse_impl`
// These types are ignored because they are not used by any `pub` functions: `AvailableUpdateResponse`, `UploadMessageResponse`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BytebeamSdk>>
abstract class BytebeamSdk implements RustOpaqueInterface {
  BytebeamCredentials get credentials;

  set credentials(BytebeamCredentials credentials);

  Future<Uint8List> downloadFirmware({required String url});

  Future<AvailableUpdate?> fetchAvailableUpdate();

  static Future<BytebeamSdk> parse({required String creds}) =>
      RustLib.instance.api.crateApiBytebeamSdkParse(creds: creds);

  Future<void> uploadMessagesBatchFfi(
      {required String stream, required List<StreamMessageFfi> messages});
}

class AvailableUpdate {
  final String actionId;
  final UpdateParams params;

  const AvailableUpdate({
    required this.actionId,
    required this.params,
  });

  @override
  int get hashCode => actionId.hashCode ^ params.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AvailableUpdate &&
          runtimeType == other.runtimeType &&
          actionId == other.actionId &&
          params == other.params;
}

class BytebeamCertificates {
  final String caCertificate;
  final String deviceCertificate;
  final String devicePrivateKey;

  const BytebeamCertificates({
    required this.caCertificate,
    required this.deviceCertificate,
    required this.devicePrivateKey,
  });

  @override
  int get hashCode =>
      caCertificate.hashCode ^
      deviceCertificate.hashCode ^
      devicePrivateKey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BytebeamCertificates &&
          runtimeType == other.runtimeType &&
          caCertificate == other.caCertificate &&
          deviceCertificate == other.deviceCertificate &&
          devicePrivateKey == other.devicePrivateKey;
}

class BytebeamCredentials {
  final String projectId;
  final String deviceId;
  final String apiUrl;
  final BytebeamCertificates authentication;

  const BytebeamCredentials({
    required this.projectId,
    required this.deviceId,
    required this.apiUrl,
    required this.authentication,
  });

  @override
  int get hashCode =>
      projectId.hashCode ^
      deviceId.hashCode ^
      apiUrl.hashCode ^
      authentication.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BytebeamCredentials &&
          runtimeType == other.runtimeType &&
          projectId == other.projectId &&
          deviceId == other.deviceId &&
          apiUrl == other.apiUrl &&
          authentication == other.authentication;
}

@freezed
sealed class FieldValue with _$FieldValue {
  const FieldValue._();

  const factory FieldValue.null_() = FieldValue_Null;
  const factory FieldValue.string(
    String field0,
  ) = FieldValue_String;
  const factory FieldValue.int(
    PlatformInt64 field0,
  ) = FieldValue_Int;
  const factory FieldValue.bool(
    bool field0,
  ) = FieldValue_Bool;
  const factory FieldValue.float(
    double field0,
  ) = FieldValue_Float;
  const factory FieldValue.array(
    List<FieldValue> field0,
  ) = FieldValue_Array;
}

class StreamMessageFfi {
  final int sequence;
  final BigInt timestamp;
  final Map<String, FieldValue> fields;

  const StreamMessageFfi({
    required this.sequence,
    required this.timestamp,
    required this.fields,
  });

  @override
  int get hashCode => sequence.hashCode ^ timestamp.hashCode ^ fields.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StreamMessageFfi &&
          runtimeType == other.runtimeType &&
          sequence == other.sequence &&
          timestamp == other.timestamp &&
          fields == other.fields;
}

class UpdateParams {
  final String url;
  final String version;
  final String? checksum;
  final int size;

  const UpdateParams({
    required this.url,
    required this.version,
    this.checksum,
    required this.size,
  });

  @override
  int get hashCode =>
      url.hashCode ^ version.hashCode ^ checksum.hashCode ^ size.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UpdateParams &&
          runtimeType == other.runtimeType &&
          url == other.url &&
          version == other.version &&
          checksum == other.checksum &&
          size == other.size;
}
